"""
This script analyze the simulations generated by mc_get_spectra.py
it estimates block numerical covariances from the simulations
"""


from pspy import pspy_utils, so_dict, so_spectra
import numpy as np
import sys

d = so_dict.so_dict()
d.read_from_file(sys.argv[1])

type = d["type"]
surveys = d["surveys"]
iStart = d["iStart"]
iStop = d["iStop"]

spec_dir = "sim_spectra"
cov_dir = "covariances"

pspy_utils.create_directory(cov_dir)

spectra = ["TT", "TE", "TB", "ET", "BT", "EE", "EB", "BE", "BB"]


spec_list = []
for id_sv1, sv1 in enumerate(surveys):
    arrays_1 = d["arrays_%s" % sv1]
    for id_ar1, ar1 in enumerate(arrays_1):
        for id_sv2, sv2 in enumerate(surveys):
            arrays_2 = d["arrays_%s" % sv2]
            for id_ar2, ar2 in enumerate(arrays_2):
                if  (id_sv1 == id_sv2) & (id_ar1 > id_ar2) : continue
                if  (id_sv1 > id_sv2) : continue
                spec_list += ["%s_%sx%s_%s" % (sv1, ar1, sv2, ar2)]
            
for sid1, spec1 in enumerate(spec_list):
    for sid2, spec2 in enumerate(spec_list):
        if sid1 > sid2 : continue
        na, nb = spec1.split("x")
        nc, nd = spec2.split("x")
        
        ps_list_ab = []
        ps_list_cd = []
        for iii in range(iStart, iStop):
            spec_name_cross_ab = "%s_%sx%s_cross_%05d" % (type, na, nb, iii)
            spec_name_cross_cd = "%s_%sx%s_cross_%05d" % (type, nc, nd, iii)
        
            lb, ps_ab = so_spectra.read_ps(spec_dir + "/%s.dat" % spec_name_cross_ab, spectra=spectra)
            lb, ps_cd = so_spectra.read_ps(spec_dir + "/%s.dat" % spec_name_cross_cd, spectra=spectra)
    
            vec_ab = []
            vec_cd = []
            for spec in ["TT", "TE", "ET", "EE"]:
                vec_ab = np.append(vec_ab, ps_ab[spec])
                vec_cd = np.append(vec_cd, ps_cd[spec])
    
            ps_list_ab += [vec_ab]
            ps_list_cd += [vec_cd]

        cov_mc = 0
        for iii in range(iStart, iStop):
            cov_mc += np.outer(ps_list_ab[iii], ps_list_cd[iii])

        cov_mc = cov_mc / (iStop-iStart) - np.outer(np.mean(ps_list_ab, axis=0), np.mean(ps_list_cd, axis=0))

        np.save("%s/mc_cov_%sx%s_%sx%s.npy"%(cov_dir, na, nb, nc, nd), cov_mc)


